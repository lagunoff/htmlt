{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE StrictData #-}
{-# LANGUAGE BlockArguments #-}
{-# LANGUAGE RecursiveDo #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedRecordDot #-}
{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DerivingStrategies #-}
module Clickable.WebSocket where

import Clickable.Internal
import Clickable.Types
import Control.Concurrent
import Control.Concurrent.Async (race)
import Control.Exception (bracket, try)
import Control.Monad
import Control.Monad.State.Strict (modify)
import Data.Binary.Builder ( Builder )
import Data.ByteString (ByteString)
import Data.ByteString.Base64.Lazy qualified as B64
import Data.ByteString.Unsafe (unsafePackCStringLen)
import Data.Data
import Data.IORef
import Data.Map (Map)
import Data.Tuple
import Foreign.Ptr
import GHC.Generics
import Network.HTTP.Types
import Network.Wai
import Network.Wai.Handler.WebSockets
import Network.WebSockets
import qualified Data.Binary as Binary
import qualified Data.ByteString.Builder as Builder
import qualified Data.ByteString.Lazy as BSL
import qualified Data.Map as Map
import Data.Word

index :: Builder -> Builder
index content =
  "<!document html>\n\
  \<html>\n\
  \  <head>\n\
  \  </head>\n\
  \  <body>\n\
  \    <script type=\"text/javascript\">\n\
  \    " <> jsrts <> "\n\
  \      function fromB64(b64) {\n\
  \         return Uint8Array.from(atob(b64), function(c) { return c.charCodeAt(0); });\n\
  \      }\n\
  \      /*clickable.evalBuf(fromB64('" <> Builder.lazyByteString b64 <> "'));*/\n\
  \      clickable.runWebsocket('/dev.sock');\n\
  \    </script>\n\
  \  </body>\n\
  \</html>"
  where
    b64 = B64.encode $ Builder.toLazyByteString content

jsrts :: Builder
jsrts =
  "(()=>{\"use strict\";var __webpack_modules__={151:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{AZ:()=>evalRange,JC:()=>ClientMsgTag,ni:()=>encodeClientMessage});const VAL=0,NEXT=1;function Cons(e,t){return[e,t]}var ExprTag,ClientMsgTag;function evalRange(e){let t=null;for(;e.begin<e.end;)t=evalNext(e,null,t)}function evalNext(self,args=null,prevRes=null){var _a;const tag=self.mem.getInt8(self.begin);switch(self.begin++,tag){case ExprTag.Null:return null;case ExprTag.Bool:{const e=!!self.mem.getInt8(self.begin);return self.begin++,e}case ExprTag.I8:{const e=self.mem.getInt8(self.begin);return self.begin++,e}case ExprTag.I16:{const e=self.mem.getInt16(self.begin,!0);return self.begin+=2,e}case ExprTag.I32:{const e=self.mem.getInt32(self.begin,!0);return self.begin+=4,e}case ExprTag.I64:{const e=self.mem.getBigInt64(self.begin,!0);return self.begin+=8,e}case ExprTag.U8:{const e=self.mem.getUint8(self.begin);return self.begin++,e}case ExprTag.U16:{const e=self.mem.getUint16(self.begin,!0);return self.begin+=2,e}case ExprTag.U32:{const e=self.mem.getUint32(self.begin,!0);return self.begin+=4,e}case ExprTag.U64:{const e=self.mem.getBigUint64(self.begin,!0);return self.begin+=8,e}case ExprTag.F32:{const e=self.mem.getFloat32(self.begin,!0);return self.begin+=4,e}case ExprTag.F64:{const e=self.mem.getFloat64(self.begin,!0);return self.begin+=8,e}case ExprTag.Str:return decodeString(self);case ExprTag.Arr:{const e=Number(self.mem.getBigUint64(self.begin,!1)),t=new Array(e).fill(void 0);self.begin+=8;for(let n=0;n<e;n++){const e=evalNext(self,args,prevRes);t[n]=e}return t}case ExprTag.Obj:{const e=Number(self.mem.getBigUint64(self.begin,!1)),t={};self.begin+=8;for(let n=0;n<e;n++){const e=decodeString(self),n=evalNext(self,args,prevRes);t[e]=n}return t}case ExprTag.U8Arr:{const e=Number(self.mem.getBigUint64(self.begin,!1));self.begin+=8;const t=new Uint8Array(self.mem.buffer).slice(self.begin,self.begin+e);return self.begin+=e,t}case ExprTag.Dot:{const e=evalNext(self,args,prevRes),t=decodeString(self);return e[t]}case ExprTag.SetProp:{const e=evalNext(self,args,prevRes),t=decodeString(self),n=evalNext(self,args,prevRes);return e[t]=n,null}case ExprTag.Ix:{const e=evalNext(self,args,prevRes),t=self.mem.getUint32(self.begin);return self.begin+=4,e[t]}case ExprTag.Id:{const e=decodeString(self);return __webpack_require__.g[e]}case ExprTag.Lam:{const e=lookAheadExpr(self.mem,self.begin);if(self.isMutableMem){const t=new Uint8Array(self.mem.buffer).slice(self.begin,e),n=Object.assign(Object.assign({},self),{mem:new DataView(t.buffer),isMutableMem:!1,begin:0,end:t.length});return self.begin=e,function(e){n.begin=0,evalNext(n,Cons(e,args))}}{const t=self.begin,n=Object.assign(Object.assign({},self),{end:e});return self.begin=e,function(e){n.begin=t,evalNext(n,Cons(e,args))}}}case ExprTag.Arg:{const e=self.mem.getInt8(self.begin);self.begin+=1;let t=args,n=0;for(;t;){if(n==e)return t[VAL];t=t[NEXT],n++}throw new Error(\"Arg: index out of argument stack\")}case ExprTag.Apply:{const e=evalNext(self,args,prevRes),t=evalNext(self,args,prevRes);return e(t)}case ExprTag.Call:{const e=evalNext(self,args,prevRes),t=decodeString(self),n=evalNext(self,args,prevRes);return e[t].call(e,n)}case ExprTag.AssignRef:{const e=self.mem.getUint32(self.begin,!0),t=self.mem.getUint32(self.begin+4,!0);self.begin+=8;const n=evalNext(self,args,prevRes);if(self.persistent.refs.has(e)){const r=self.persistent.refs.get(e);r.set(t,n)}else{const r=new Map;r.set(t,n),self.persistent.refs.set(e,r)}return n}case ExprTag.FreeRef:{const e=self.mem.getUint32(self.begin,!0),t=self.mem.getUint32(self.begin+4,!0);self.begin+=8;const n=self.persistent.refs.get(e);return n?(n.delete(t),0==n.size&&self.persistent.refs.delete(e),null):null}case ExprTag.Ref:{const e=self.mem.getUint32(self.begin,!0),t=self.mem.getUint32(self.begin+4,!0);return self.begin+=8,null===(_a=self.persistent.refs.get(e))||void 0===_a?void 0:_a.get(t)}case ExprTag.FreeScope:{const e=self.mem.getUint32(self.begin,!0);return self.begin+=4,self.persistent.refs.delete(e),null}case ExprTag.PeekStack:{const e=self.mem.getInt8(self.begin);self.begin+=1;let t=self.persistent.stack,n=0;for(;t;){if(n==e)return t[VAL];t=t[NEXT],n++}throw new Error(\"PeekStack: index out of stack size\")}case ExprTag.PushStack:{const e=evalNext(self,args,prevRes);return self.persistent.stack=Cons(e,self.persistent.stack),e}case ExprTag.PopStack:{if(!self.persistent.stack)throw new Error(\"PopStack: empty stack\");const e=self.persistent.stack[VAL];return self.persistent.stack=self.persistent.stack[NEXT],e}case ExprTag.InsPop:{if(!self.persistent.stack)throw new Error(\"InsPop: empty stack\");const e=self.persistent.stack[VAL];if(self.persistent.stack=self.persistent.stack[NEXT],!self.persistent.stack)throw new Error(\"InsPop: empty stack\");const t=self.persistent.stack[VAL];return utils.insert(t,e),e}case ExprTag.ElementProp:{const e=evalNext(self,args,prevRes),t=decodeString(self),n=evalNext(self,args,prevRes);return utils.prop(e,t,n),null}case ExprTag.ElementAttr:{const e=evalNext(self,args,prevRes),t=decodeString(self),n=decodeString(self);return utils.attr(e,t,n),null}case ExprTag.ClassListAdd:case ExprTag.ClassListRemove:throw new Error(\"Unimplemented\");case ExprTag.InsertBrackets:{if(!self.persistent.stack)throw new Error(\"InsertBrackets: empty stack\");const e=self.persistent.stack[VAL];return utils.insertBrackets(e)}case ExprTag.ClearBrackets:{const e=evalNext(self,args,prevRes);return utils.clearBrackets(e,!1),null}case ExprTag.DropBrackets:{const e=evalNext(self,args,prevRes);return utils.clearBrackets(e,!0),null}case ExprTag.CreateElement:{const e=decodeString(self);return document.createElement(e)}case ExprTag.CreateElementNS:{const e=decodeString(self),t=decodeString(self);return document.createElementNS(e,t)}case ExprTag.CreateTextNode:{const e=decodeString(self);return document.createTextNode(e)}case ExprTag.UpdateTextNode:{const e=evalNext(self,args,prevRes),t=decodeString(self);return e.textContent=t,null}case ExprTag.Eval:{const js=decodeString(self);return eval(js)}case ExprTag.TriggerEvent:{const e=self.mem.getUint32(self.begin,!0);self.begin+=4;const t=evalNext(self,args,prevRes);return self.triggerEvent(e,t),null}case ExprTag.YieldResult:{const e=self.mem.getUint32(self.begin,!1);return self.begin+=4,self.resumeCont(e,prevRes),null}}}function lookAheadExpr(e,t){switch(e.getInt8(t++)){case ExprTag.Null:return t;case ExprTag.Bool:case ExprTag.I8:return t+1;case ExprTag.I16:return t+2;case ExprTag.I32:return t+4;case ExprTag.I64:return t+8;case ExprTag.U8:return t+1;case ExprTag.U16:return t+2;case ExprTag.U32:return t+4;case ExprTag.U64:return t+8;case ExprTag.F32:return t+4;case ExprTag.F64:return t+8;case ExprTag.Str:case ExprTag.Eval:return t+8+Number(e.getBigUint64(t,!1));case ExprTag.TriggerEvent:return lookAheadExpr(e,t+4);case ExprTag.YieldResult:return t+4}throw new Error(\"lookAheadExpr: unimplemented\")}function encodeValue(e,t){if(\"boolean\"==typeof t)return e.mem.setUint8(e.begin,ExprTag.Bool),e.mem.setUint8(e.begin+1,t?1:0),void(e.begin+=2);if(\"number\"==typeof t)return Number.isInteger(t)?(e.mem.setUint8(e.begin,ExprTag.I32),e.mem.setUint32(e.begin+1,t,!0),void(e.begin+=5)):(e.mem.setUint8(e.begin,ExprTag.F64),e.mem.setFloat64(e.begin+1,t,!0),void(e.begin+=9));if(\"string\"==typeof t){e.mem.setUint8(e.begin,ExprTag.Str);const n=new Uint8Array(e.mem.buffer).subarray(e.begin+9),r=(new TextEncoder).encodeInto(t,n);return e.mem.setBigUint64(e.begin+1,BigInt(r.written),!1),void(e.begin+=9+r.written)}if(\"bigint\"==typeof t)return e.mem.setUint8(e.begin,ExprTag.I64),e.mem.setBigInt64(e.begin+1,BigInt(t),!0),void(e.begin+=9);if(Array.isArray(t))return e.mem.setUint8(e.begin,ExprTag.Arr),e.mem.setBigUint64(e.begin+1,BigInt(t.length),!1),e.begin+=9,void t.forEach((t=>encodeValue(e,t)));if(t instanceof Uint8Array)return e.mem.setUint8(e.begin,ExprTag.U8Arr),e.mem.setBigUint64(e.begin+1,BigInt(t.byteLength),!1),new Uint8Array(e.mem.buffer).set(t,e.begin+9),void(e.begin+=9+t.byteLength);if(null==t)return e.mem.setUint8(e.begin,ExprTag.Null),void e.begin++;const n=Object.entries(t);e.mem.setUint8(e.begin,ExprTag.Obj),e.mem.setBigUint64(e.begin+1,BigInt(n.length),!1),e.begin+=9,n.forEach((([t,n])=>{encodeValue(e,t),encodeValue(e,n)}))}function encodeClientMessage(e,t){switch(t[0]){case ClientMsgTag.StartMsg:return e.mem.setUint8(e.begin,ClientMsgTag.StartMsg),e.begin++,void encodeValue(e,t[1]);case ClientMsgTag.EventMsg:return e.mem.setUint8(e.begin,ClientMsgTag.EventMsg),e.mem.setUint32(e.begin+1,t[1],!0),e.begin+=5,void encodeValue(e,t[2]);case ClientMsgTag.ResumeMsg:return e.mem.setUint8(e.begin,ClientMsgTag.ResumeMsg),e.mem.setUint32(e.begin+1,t[1],!1),e.begin+=5,void encodeValue(e,t[2])}}!function(e){e[e.Null=0]=\"Null\",e[e.Bool=1]=\"Bool\",e[e.I8=2]=\"I8\",e[e.I16=3]=\"I16\",e[e.I32=4]=\"I32\",e[e.I64=5]=\"I64\",e[e.U8=6]=\"U8\",e[e.U16=7]=\"U16\",e[e.U32=8]=\"U32\",e[e.U64=9]=\"U64\",e[e.F32=10]=\"F32\",e[e.F64=11]=\"F64\",e[e.Str=12]=\"Str\",e[e.Arr=13]=\"Arr\",e[e.Obj=14]=\"Obj\",e[e.U8Arr=15]=\"U8Arr\",e[e.Dot=16]=\"Dot\",e[e.SetProp=17]=\"SetProp\",e[e.Ix=18]=\"Ix\",e[e.Id=19]=\"Id\",e[e.Lam=20]=\"Lam\",e[e.Arg=21]=\"Arg\",e[e.Apply=22]=\"Apply\",e[e.Call=23]=\"Call\",e[e.AssignRef=24]=\"AssignRef\",e[e.FreeRef=25]=\"FreeRef\",e[e.Ref=26]=\"Ref\",e[e.FreeScope=27]=\"FreeScope\",e[e.PeekStack=28]=\"PeekStack\",e[e.PushStack=29]=\"PushStack\",e[e.PopStack=30]=\"PopStack\",e[e.InsPop=31]=\"InsPop\",e[e.ElementProp=32]=\"ElementProp\",e[e.ElementAttr=33]=\"ElementAttr\",e[e.ClassListAdd=34]=\"ClassListAdd\",e[e.ClassListRemove=35]=\"ClassListRemove\",e[e.InsertBrackets=36]=\"InsertBrackets\",e[e.ClearBrackets=37]=\"ClearBrackets\",e[e.DropBrackets=38]=\"DropBrackets\",e[e.CreateElement=39]=\"CreateElement\",e[e.CreateElementNS=40]=\"CreateElementNS\",e[e.CreateTextNode=41]=\"CreateTextNode\",e[e.UpdateTextNode=42]=\"UpdateTextNode\",e[e.Eval=43]=\"Eval\",e[e.TriggerEvent=44]=\"TriggerEvent\",e[e.YieldResult=45]=\"YieldResult\"}(ExprTag||(ExprTag={})),function(e){e[e.StartMsg=0]=\"StartMsg\",e[e.EventMsg=1]=\"EventMsg\",e[e.ResumeMsg=2]=\"ResumeMsg\"}(ClientMsgTag||(ClientMsgTag={}));const decoder=new TextDecoder(\"utf8\");function decodeString(e){const t=Number(e.mem.getBigUint64(e.begin,!1));e.begin+=8;const n=new Uint8Array(e.mem.buffer).subarray(e.begin,e.begin+t);return e.begin+=t,decoder.decode(n)}var utils;!function(e){function t(e,t){e instanceof Comment?e.parentElement.insertBefore(t,e):e.appendChild(t)}function n(e){return e instanceof Comment?e.parentElement:e}function r(e){return e instanceof Comment&&\"ContentBrackets {{\"==e.textContent}e.insert=t,e.prop=function(e,t,n){e instanceof Comment?e.parentElement[t]=n:e[t]=n},e.attr=function(e,t,r){n(e).setAttribute(t,r)},e.addEventListener=function(e,t,r){n(e).addEventListener(t,r)},e.removeEventListener=function(e,t,r){n(e).removeEventListener(t,r)},e.insertBrackets=function(e){const n=document.createComment(\"ContentBrackets {{\"),r=document.createComment(\"}}\");return t(e,n),t(e,r),r},e.clearBrackets=function(e,t){if(e instanceof Comment){let s=0;for(;e.previousSibling&&(0!=s||!r(e.previousSibling));)(n=e.previousSibling)instanceof Comment&&\"}}\"==n.textContent?s++:r(e.previousSibling)&&s--,e.previousSibling.parentNode.removeChild(e.previousSibling);t&&(e.previousSibling.parentNode.removeChild(e.previousSibling),e.parentNode.removeChild(e))}else e.innerHTML=\"\";var n},e.getBuilderElement=n}(utils||(utils={}))}},__webpack_module_cache__={};function __webpack_require__(e){var t=__webpack_module_cache__[e];if(void 0!==t)return t.exports;var n=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e](n,n.exports,__webpack_require__),n.exports}__webpack_require__.d=(e,t)=>{for(var n in t)__webpack_require__.o(t,n)&&!__webpack_require__.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},__webpack_require__.g=function(){if(\"object\"==typeof globalThis)return globalThis;try{return this||new Function(\"return this\")()}catch(e){if(\"object\"==typeof window)return window}}(),__webpack_require__.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);var __webpack_exports__={},proto=__webpack_require__(151);const outBuf=new ArrayBuffer(102400),mem=new DataView(outBuf);function runWebsocket(e,t=null){const n=new WebSocket(e),r={refs:new Map,stack:null};function s(e,t){const r={mem,begin:0,end:outBuf.byteLength};proto.ni(r,[proto.JC.EventMsg,e,t]),n.send(new Uint8Array(outBuf).subarray(0,r.end))}function i(e,t){const r={mem,begin:0,end:outBuf.byteLength};proto.ni(r,[proto.JC.ResumeMsg,e,t]),n.send(new Uint8Array(outBuf).subarray(0,r.end))}n.onopen=e=>{const r={mem,begin:0,end:outBuf.byteLength};proto.ni(r,[proto.JC.StartMsg,t]),n.send(new Uint8Array(outBuf).subarray(0,r.end))},n.onmessage=e=>{convertBlobToUint8Array(e.data).then((e=>{proto.AZ({triggerEvent:s,resumeCont:i,persistent:r,mem:new DataView(e),isMutableMem:!1,begin:0,end:e.byteLength})}))},n.onerror=e=>{console.error(\"WebSocket error:\",e)},n.onclose=t=>{console.log(\"WebSocket connection closed, reloading the tab…\"),function t(n){const r=new WebSocket(e),s=Math.min(3e4,2*n);r.onopen=e=>window.location.reload(),r.onclose=e=>{setTimeout((()=>t(s)),n)}}(100)}}function convertBlobToUint8Array(e){return new Promise(((t,n)=>{const r=new FileReader;r.onload=()=>{t(r.result)},r.onerror=e=>{n(e)},r.readAsArrayBuffer(e)}))}const FD_STDIN=0,FD_STDOUT=1,FD_STDERR=2,CLOCKID_REALTIME=0,CLOCKID_MONOTONIC=1,CLOCKID_PROCESS_CPUTIME_ID=2,CLOCKID_THREAD_CPUTIME_ID=3,ERRNO_SUCCESS=0,ERRNO_2BIG=1,ERRNO_ACCES=2,ERRNO_ADDRINUSE=3,ERRNO_ADDRNOTAVAIL=4,ERRNO_AFNOSUPPORT=5,ERRNO_AGAIN=6,ERRNO_ALREADY=7,ERRNO_BADF=8,ERRNO_BADMSG=9,ERRNO_BUSY=10,ERRNO_CANCELED=11,ERRNO_CHILD=12,ERRNO_CONNABORTED=13,ERRNO_CONNREFUSED=14,ERRNO_CONNRESET=15,ERRNO_DEADLK=16,ERRNO_DESTADDRREQ=17,ERRNO_DOM=18,ERRNO_DQUOT=19,ERRNO_EXIST=20,ERRNO_FAULT=21,ERRNO_FBIG=22,ERRNO_HOSTUNREACH=23,ERRNO_IDRM=24,ERRNO_ILSEQ=25,ERRNO_INPROGRESS=26,ERRNO_INTR=27,ERRNO_INVAL=28,ERRNO_IO=29,ERRNO_ISCONN=30,ERRNO_ISDIR=31,ERRNO_LOOP=32,ERRNO_MFILE=33,ERRNO_MLINK=34,ERRNO_MSGSIZE=35,ERRNO_MULTIHOP=36,ERRNO_NAMETOOLONG=37,ERRNO_NETDOWN=38,ERRNO_NETRESET=39,ERRNO_NETUNREACH=40,ERRNO_NFILE=41,ERRNO_NOBUFS=42,ERRNO_NODEV=43,ERRNO_NOENT=44,ERRNO_NOEXEC=45,ERRNO_NOLCK=46,ERRNO_NOLINK=47,ERRNO_NOMEM=48,ERRNO_NOMSG=49,ERRNO_NOPROTOOPT=50,ERRNO_NOSPC=51,ERRNO_NOSYS=52,ERRNO_NOTCONN=53,ERRNO_NOTDIR=54,ERRNO_NOTEMPTY=55,ERRNO_NOTRECOVERABLE=56,ERRNO_NOTSOCK=57,ERRNO_NOTSUP=58,ERRNO_NOTTY=59,ERRNO_NXIO=60,ERRNO_OVERFLOW=61,ERRNO_OWNERDEAD=62,ERRNO_PERM=63,ERRNO_PIPE=64,ERRNO_PROTO=65,ERRNO_PROTONOSUPPORT=66,ERRNO_PROTOTYPE=67,ERRNO_RANGE=68,ERRNO_ROFS=69,ERRNO_SPIPE=70,ERRNO_SRCH=71,ERRNO_STALE=72,ERRNO_TIMEDOUT=73,ERRNO_TXTBSY=74,ERRNO_XDEV=75,ERRNO_NOTCAPABLE=76,RIGHTS_FD_DATASYNC=null,RIGHTS_FD_READ=null,RIGHTS_FD_SEEK=null,RIGHTS_FD_FDSTAT_SET_FLAGS=null,RIGHTS_FD_SYNC=null,RIGHTS_FD_TELL=null,RIGHTS_FD_WRITE=64,RIGHTS_FD_ADVISE=null,RIGHTS_FD_ALLOCATE=null,RIGHTS_PATH_CREATE_DIRECTORY=null,RIGHTS_PATH_CREATE_FILE=null,RIGHTS_PATH_LINK_SOURCE=null,RIGHTS_PATH_LINK_TARGET=null,RIGHTS_PATH_OPEN=null,RIGHTS_FD_READDIR=null,RIGHTS_PATH_READLINK=null,RIGHTS_PATH_RENAME_SOURCE=null,RIGHTS_PATH_RENAME_TARGET=null,RIGHTS_PATH_FILESTAT_GET=null,RIGHTS_PATH_FILESTAT_SET_SIZE=null,RIGHTS_PATH_FILESTAT_SET_TIMES=null,RIGHTS_FD_FILESTAT_GET=null,RIGHTS_FD_FILESTAT_SET_SIZE=null,RIGHTS_FD_FILESTAT_SET_TIMES=null,RIGHTS_PATH_SYMLINK=null,RIGHTS_PATH_REMOVE_DIRECTORY=null,RIGHTS_PATH_UNLINK_FILE=null,RIGHTS_POLL_FD_READWRITE=null,RIGHTS_SOCK_SHUTDOWN=null;class Iovec{static read_bytes(e,t){const n=new Iovec;return n.buf=e.getUint32(t,!0),n.buf_len=e.getUint32(t+4,!0),n}static read_bytes_array(e,t,n){const r=[];for(let s=0;s<n;s++)r.push(Iovec.read_bytes(e,t+8*s));return r}}class Ciovec{static read_bytes(e,t){const n=new Ciovec;return n.buf=e.getUint32(t,!0),n.buf_len=e.getUint32(t+4,!0),n}static read_bytes_array(e,t,n){const r=[];for(let s=0;s<n;s++)r.push(Ciovec.read_bytes(e,t+8*s));return r}}const WHENCE_SET=0,WHENCE_CUR=1,WHENCE_END=2,FILETYPE_UNKNOWN=0,FILETYPE_BLOCK_DEVICE=1,FILETYPE_CHARACTER_DEVICE=2,FILETYPE_DIRECTORY=3,FILETYPE_REGULAR_FILE=4,FILETYPE_SOCKET_DGRAM=5,FILETYPE_SOCKET_STREAM=6,FILETYPE_SYMBOLIC_LINK=7;class Dirent{head_length(){return 24}name_length(){return this.dir_name.byteLength}write_head_bytes(e,t){e.setBigUint64(t,this.d_next,!0),e.setBigUint64(t+8,this.d_ino,!0),e.setUint32(t+16,this.dir_name.length,!0),e.setUint8(t+20,this.d_type)}write_name_bytes(e,t,n){e.set(this.dir_name.slice(0,Math.min(this.dir_name.byteLength,n)),t)}constructor(e,t,n){this.d_ino=0n;const r=(new TextEncoder).encode(t);this.d_next=e,this.d_namlen=r.byteLength,this.d_type=n,this.dir_name=r}}const ADVICE_NORMAL=0,ADVICE_SEQUENTIAL=1,ADVICE_RANDOM=2,ADVICE_WILLNEED=3,ADVICE_DONTNEED=4,ADVICE_NOREUSE=5,FDFLAGS_APPEND=1,FDFLAGS_DSYNC=null,FDFLAGS_NONBLOCK=null,FDFLAGS_RSYNC=null,FDFLAGS_SYNC=null;class Fdstat{write_bytes(e,t){e.setUint8(t,this.fs_filetype),e.setUint16(t+2,this.fs_flags,!0),e.setBigUint64(t+8,this.fs_rights_base,!0),e.setBigUint64(t+16,this.fs_rights_inherited,!0)}constructor(e,t){this.fs_rights_base=0n,this.fs_rights_inherited=0n,this.fs_filetype=e,this.fs_flags=t}}const FSTFLAGS_ATIM=null,FSTFLAGS_ATIM_NOW=null,FSTFLAGS_MTIM=null,FSTFLAGS_MTIM_NOW=null,OFLAGS_CREAT=1,OFLAGS_DIRECTORY=2,OFLAGS_EXCL=4,OFLAGS_TRUNC=8;class Filestat{write_bytes(e,t){e.setBigUint64(t,this.dev,!0),e.setBigUint64(t+8,this.ino,!0),e.setUint8(t+16,this.filetype),e.setBigUint64(t+24,this.nlink,!0),e.setBigUint64(t+32,this.size,!0),e.setBigUint64(t+38,this.atim,!0),e.setBigUint64(t+46,this.mtim,!0),e.setBigUint64(t+52,this.ctim,!0)}constructor(e,t){this.dev=0n,this.ino=0n,this.nlink=0n,this.atim=0n,this.mtim=0n,this.ctim=0n,this.filetype=e,this.size=t}}const EVENTTYPE_CLOCK=0,EVENTTYPE_FD_READ=1,EVENTTYPE_FD_WRITE=2,EVENTRWFLAGS_FD_READWRITE_HANGUP=null,SUBCLOCKFLAGS_SUBSCRIPTION_CLOCK_ABSTIME=null,SIGNAL_NONE=0,SIGNAL_HUP=1,SIGNAL_INT=2,SIGNAL_QUIT=3,SIGNAL_ILL=4,SIGNAL_TRAP=5,SIGNAL_ABRT=6,SIGNAL_BUS=7,SIGNAL_FPE=8,SIGNAL_KILL=9,SIGNAL_USR1=10,SIGNAL_SEGV=11,SIGNAL_USR2=12,SIGNAL_PIPE=13,SIGNAL_ALRM=14,SIGNAL_TERM=15,SIGNAL_CHLD=16,SIGNAL_CONT=17,SIGNAL_STOP=18,SIGNAL_TSTP=19,SIGNAL_TTIN=20,SIGNAL_TTOU=21,SIGNAL_URG=22,SIGNAL_XCPU=23,SIGNAL_XFSZ=24,SIGNAL_VTALRM=25,SIGNAL_PROF=26,SIGNAL_WINCH=27,SIGNAL_POLL=28,SIGNAL_PWR=29,SIGNAL_SYS=30,RIFLAGS_RECV_PEEK=null,RIFLAGS_RECV_WAITALL=null,ROFLAGS_RECV_DATA_TRUNCATED=null,SDFLAGS_RD=null,SDFLAGS_WR=null,PREOPENTYPE_DIR=0;class PrestatDir{write_bytes(e,t){e.setUint32(t,this.pr_name.byteLength,!0)}constructor(e){this.pr_name=(new TextEncoder).encode(e)}}class Prestat{static dir(e){const t=new Prestat;return t.tag=PREOPENTYPE_DIR,t.inner=new PrestatDir(e),t}write_bytes(e,t){e.setUint32(t,this.tag,!0),this.inner.write_bytes(e,t+4)}}let Debug=class{enable(e){this.log=createLogger(void 0===e||e,this.prefix)}get enabled(){return this.isEnabled}constructor(e){this.isEnabled=e,this.prefix=\"wasi:\",this.enable(e)}};function createLogger(e,t){return e?console.log.bind(console,\"%c%s\",\"color: #265BA0\",t):()=>{}}const debug=new Debug(!1);class WASIProcExit extends Error{constructor(e){super(\"exit with exit code \"+e),this.code=e}}let WASI=class{start(e){this.inst=e;try{return e.exports._start(),0}catch(e){if(e instanceof WASIProcExit)return e.code;throw e}}initialize(e){this.inst=e,e.exports._initialize&&e.exports._initialize()}constructor(e,t,n,r={}){this.args=[],this.env=[],this.fds=[],debug.enable(r.debug),this.args=e,this.env=t,this.fds=n;const s=this;this.wasiImport={args_sizes_get(e,t){const n=new DataView(s.inst.exports.memory.buffer);n.setUint32(e,s.args.length,!0);let r=0;for(const e of s.args)r+=e.length+1;return n.setUint32(t,r,!0),debug.log(n.getUint32(e,!0),n.getUint32(t,!0)),0},args_get(e,t){const n=new DataView(s.inst.exports.memory.buffer),r=new Uint8Array(s.inst.exports.memory.buffer),i=t;for(let i=0;i<s.args.length;i++){n.setUint32(e,t,!0),e+=4;const l=(new TextEncoder).encode(s.args[i]);r.set(l,t),n.setUint8(t+l.length,0),t+=l.length+1}return debug.enabled&&debug.log(new TextDecoder(\"utf-8\").decode(r.slice(i,t))),0},environ_sizes_get(e,t){const n=new DataView(s.inst.exports.memory.buffer);n.setUint32(e,s.env.length,!0);let r=0;for(const e of s.env)r+=e.length+1;return n.setUint32(t,r,!0),debug.log(n.getUint32(e,!0),n.getUint32(t,!0)),0},environ_get(e,t){const n=new DataView(s.inst.exports.memory.buffer),r=new Uint8Array(s.inst.exports.memory.buffer),i=t;for(let i=0;i<s.env.length;i++){n.setUint32(e,t,!0),e+=4;const l=(new TextEncoder).encode(s.env[i]);r.set(l,t),n.setUint8(t+l.length,0),t+=l.length+1}return debug.enabled&&debug.log(new TextDecoder(\"utf-8\").decode(r.slice(i,t))),0},clock_res_get(e,t){let n;switch(e){case CLOCKID_MONOTONIC:n=5000n;break;case CLOCKID_REALTIME:n=1000000n;break;default:return ERRNO_NOSYS}return new DataView(s.inst.exports.memory.buffer).setBigUint64(t,n,!0),ERRNO_SUCCESS},clock_time_get(e,t,n){const r=new DataView(s.inst.exports.memory.buffer);if(e===CLOCKID_REALTIME)r.setBigUint64(n,1000000n*BigInt((new Date).getTime()),!0);else if(e==CLOCKID_MONOTONIC){let e;try{e=BigInt(Math.round(1e6*performance.now()))}catch(t){e=0n}r.setBigUint64(n,e,!0)}else r.setBigUint64(n,0n,!0);return 0},fd_advise:(e,t,n,r)=>null!=s.fds[e]?ERRNO_SUCCESS:ERRNO_BADF,fd_allocate:(e,t,n)=>null!=s.fds[e]?s.fds[e].fd_allocate(t,n):ERRNO_BADF,fd_close(e){if(null!=s.fds[e]){const t=s.fds[e].fd_close();return s.fds[e]=void 0,t}return ERRNO_BADF},fd_datasync:e=>null!=s.fds[e]?s.fds[e].fd_sync():ERRNO_BADF,fd_fdstat_get(e,t){if(null!=s.fds[e]){const{ret:n,fdstat:r}=s.fds[e].fd_fdstat_get();return null!=r&&r.write_bytes(new DataView(s.inst.exports.memory.buffer),t),n}return ERRNO_BADF},fd_fdstat_set_flags:(e,t)=>null!=s.fds[e]?s.fds[e].fd_fdstat_set_flags(t):ERRNO_BADF,fd_fdstat_set_rights:(e,t,n)=>null!=s.fds[e]?s.fds[e].fd_fdstat_set_rights(t,n):ERRNO_BADF,fd_filestat_get(e,t){if(null!=s.fds[e]){const{ret:n,filestat:r}=s.fds[e].fd_filestat_get();return null!=r&&r.write_bytes(new DataView(s.inst.exports.memory.buffer),t),n}return ERRNO_BADF},fd_filestat_set_size:(e,t)=>null!=s.fds[e]?s.fds[e].fd_filestat_set_size(t):ERRNO_BADF,fd_filestat_set_times:(e,t,n,r)=>null!=s.fds[e]?s.fds[e].fd_filestat_set_times(t,n,r):ERRNO_BADF,fd_pread(e,t,n,r,i){const l=new DataView(s.inst.exports.memory.buffer),a=new Uint8Array(s.inst.exports.memory.buffer);if(null!=s.fds[e]){const _=Iovec.read_bytes_array(l,t,n);let o=0;for(const t of _){const{ret:n,data:_}=s.fds[e].fd_pread(t.buf_len,r);if(n!=ERRNO_SUCCESS)return l.setUint32(i,o,!0),n;if(a.set(_,t.buf),o+=_.length,r+=BigInt(_.length),_.length!=t.buf_len)break}return l.setUint32(i,o,!0),ERRNO_SUCCESS}return ERRNO_BADF},fd_prestat_get(e,t){const n=new DataView(s.inst.exports.memory.buffer);if(null!=s.fds[e]){const{ret:r,prestat:i}=s.fds[e].fd_prestat_get();return null!=i&&i.write_bytes(n,t),r}return ERRNO_BADF},fd_prestat_dir_name(e,t,n){if(null!=s.fds[e]){const{ret:r,prestat:i}=s.fds[e].fd_prestat_get();if(null==i)return r;const l=i.inner.pr_name;return new Uint8Array(s.inst.exports.memory.buffer).set(l.slice(0,n),t),l.byteLength>n?ERRNO_NAMETOOLONG:ERRNO_SUCCESS}return ERRNO_BADF},fd_pwrite(e,t,n,r,i){const l=new DataView(s.inst.exports.memory.buffer),a=new Uint8Array(s.inst.exports.memory.buffer);if(null!=s.fds[e]){const _=Ciovec.read_bytes_array(l,t,n);let o=0;for(const t of _){const n=a.slice(t.buf,t.buf+t.buf_len),{ret:_,nwritten:f}=s.fds[e].fd_pwrite(n,r);if(_!=ERRNO_SUCCESS)return l.setUint32(i,o,!0),_;if(o+=f,r+=BigInt(f),f!=n.byteLength)break}return l.setUint32(i,o,!0),ERRNO_SUCCESS}return ERRNO_BADF},fd_read(e,t,n,r){const i=new DataView(s.inst.exports.memory.buffer),l=new Uint8Array(s.inst.exports.memory.buffer);if(null!=s.fds[e]){const a=Iovec.read_bytes_array(i,t,n);let _=0;for(const t of a){const{ret:n,data:a}=s.fds[e].fd_read(t.buf_len);if(n!=ERRNO_SUCCESS)return i.setUint32(r,_,!0),n;if(l.set(a,t.buf),_+=a.length,a.length!=t.buf_len)break}return i.setUint32(r,_,!0),ERRNO_SUCCESS}return ERRNO_BADF},fd_readdir(e,t,n,r,i){const l=new DataView(s.inst.exports.memory.buffer),a=new Uint8Array(s.inst.exports.memory.buffer);if(null!=s.fds[e]){let _=0;for(;;){const{ret:o,dirent:f}=s.fds[e].fd_readdir_single(r);if(0!=o)return l.setUint32(i,_,!0),o;if(null==f)break;if(n-_<f.head_length()){_=n;break}const u=new ArrayBuffer(f.head_length());if(f.write_head_bytes(new DataView(u),0),a.set(new Uint8Array(u).slice(0,Math.min(u.byteLength,n-_)),t),t+=f.head_length(),_+=f.head_length(),n-_<f.name_length()){_=n;break}f.write_name_bytes(a,t,n-_),t+=f.name_length(),_+=f.name_length(),r=f.d_next}return l.setUint32(i,_,!0),0}return ERRNO_BADF},fd_renumber(e,t){if(null!=s.fds[e]&&null!=s.fds[t]){const n=s.fds[t].fd_close();return 0!=n?n:(s.fds[t]=s.fds[e],s.fds[e]=void 0,0)}return ERRNO_BADF},fd_seek(e,t,n,r){const i=new DataView(s.inst.exports.memory.buffer);if(null!=s.fds[e]){const{ret:l,offset:a}=s.fds[e].fd_seek(t,n);return i.setBigInt64(r,a,!0),l}return ERRNO_BADF},fd_sync:e=>null!=s.fds[e]?s.fds[e].fd_sync():ERRNO_BADF,fd_tell(e,t){const n=new DataView(s.inst.exports.memory.buffer);if(null!=s.fds[e]){const{ret:r,offset:i}=s.fds[e].fd_tell();return n.setBigUint64(t,i,!0),r}return ERRNO_BADF},fd_write(e,t,n,r){const i=new DataView(s.inst.exports.memory.buffer),l=new Uint8Array(s.inst.exports.memory.buffer);if(null!=s.fds[e]){const a=Ciovec.read_bytes_array(i,t,n);let _=0;for(const t of a){const n=l.slice(t.buf,t.buf+t.buf_len),{ret:a,nwritten:o}=s.fds[e].fd_write(n);if(a!=ERRNO_SUCCESS)return i.setUint32(r,_,!0),a;if(_+=o,o!=n.byteLength)break}return i.setUint32(r,_,!0),ERRNO_SUCCESS}return ERRNO_BADF},path_create_directory(e,t,n){const r=new Uint8Array(s.inst.exports.memory.buffer);if(null!=s.fds[e]){const i=new TextDecoder(\"utf-8\").decode(r.slice(t,t+n));return s.fds[e].path_create_directory(i)}return ERRNO_BADF},path_filestat_get(e,t,n,r,i){const l=new DataView(s.inst.exports.memory.buffer),a=new Uint8Array(s.inst.exports.memory.buffer);if(null!=s.fds[e]){const _=new TextDecoder(\"utf-8\").decode(a.slice(n,n+r)),{ret:o,filestat:f}=s.fds[e].path_filestat_get(t,_);return null!=f&&f.write_bytes(l,i),o}return ERRNO_BADF},path_filestat_set_times(e,t,n,r,i,l,a){const _=new Uint8Array(s.inst.exports.memory.buffer);if(null!=s.fds[e]){const o=new TextDecoder(\"utf-8\").decode(_.slice(n,n+r));return s.fds[e].path_filestat_set_times(t,o,i,l,a)}return ERRNO_BADF},path_link(e,t,n,r,i,l,a){const _=new Uint8Array(s.inst.exports.memory.buffer);if(null!=s.fds[e]&&null!=s.fds[i]){const o=new TextDecoder(\"utf-8\").decode(_.slice(n,n+r)),f=new TextDecoder(\"utf-8\").decode(_.slice(l,l+a)),{ret:u,inode_obj:E}=s.fds[e].path_lookup(o,t);return null==E?u:s.fds[i].path_link(f,E,!1)}return ERRNO_BADF},path_open(e,t,n,r,i,l,a,_,o){const f=new DataView(s.inst.exports.memory.buffer),u=new Uint8Array(s.inst.exports.memory.buffer);if(null!=s.fds[e]){const E=new TextDecoder(\"utf-8\").decode(u.slice(n,n+r));debug.log(E);const{ret:c,fd_obj:R}=s.fds[e].path_open(t,E,i,l,a,_);if(0!=c)return c;s.fds.push(R);const d=s.fds.length-1;return f.setUint32(o,d,!0),0}return ERRNO_BADF},path_readlink(e,t,n,r,i,l){const a=new DataView(s.inst.exports.memory.buffer),_=new Uint8Array(s.inst.exports.memory.buffer);if(null!=s.fds[e]){const o=new TextDecoder(\"utf-8\").decode(_.slice(t,t+n));debug.log(o);const{ret:f,data:u}=s.fds[e].path_readlink(o);if(null!=u){const e=(new TextEncoder).encode(u);if(e.length>i)return a.setUint32(l,0,!0),ERRNO_BADF;_.set(e,r),a.setUint32(l,e.length,!0)}return f}return ERRNO_BADF},path_remove_directory(e,t,n){const r=new Uint8Array(s.inst.exports.memory.buffer);if(null!=s.fds[e]){const i=new TextDecoder(\"utf-8\").decode(r.slice(t,t+n));return s.fds[e].path_remove_directory(i)}return ERRNO_BADF},path_rename(e,t,n,r,i,l){const a=new Uint8Array(s.inst.exports.memory.buffer);if(null!=s.fds[e]&&null!=s.fds[r]){const _=new TextDecoder(\"utf-8\").decode(a.slice(t,t+n)),o=new TextDecoder(\"utf-8\").decode(a.slice(i,i+l));let{ret:f,inode_obj:u}=s.fds[e].path_unlink(_);if(null==u)return f;if(f=s.fds[r].path_link(o,u,!0),f!=ERRNO_SUCCESS&&s.fds[e].path_link(_,u,!0)!=ERRNO_SUCCESS)throw\"path_link should always return success when relinking an inode back to the original place\";return f}return ERRNO_BADF},path_symlink(e,t,n,r,i){const l=new Uint8Array(s.inst.exports.memory.buffer);return null!=s.fds[n]?(new TextDecoder(\"utf-8\").decode(l.slice(e,e+t)),new TextDecoder(\"utf-8\").decode(l.slice(r,r+i)),ERRNO_NOTSUP):ERRNO_BADF},path_unlink_file(e,t,n){const r=new Uint8Array(s.inst.exports.memory.buffer);if(null!=s.fds[e]){const i=new TextDecoder(\"utf-8\").decode(r.slice(t,t+n));return s.fds[e].path_unlink_file(i)}return ERRNO_BADF},poll_oneoff(e,t,n){throw\"async io not supported\"},proc_exit(e){throw new WASIProcExit(e)},proc_raise(e){throw\"raised signal \"+e},sched_yield(){},random_get(e,t){const n=new Uint8Array(s.inst.exports.memory.buffer);for(let r=0;r<t;r++)n[e+r]=256*Math.random()|0},sock_recv(e,t,n){throw\"sockets not supported\"},sock_send(e,t,n){throw\"sockets not supported\"},sock_shutdown(e,t){throw\"sockets not supported\"},sock_accept(e,t){throw\"sockets not supported\"}}}};class Fd{fd_allocate(e,t){return ERRNO_NOTSUP}fd_close(){return 0}fd_fdstat_get(){return{ret:ERRNO_NOTSUP,fdstat:null}}fd_fdstat_set_flags(e){return ERRNO_NOTSUP}fd_fdstat_set_rights(e,t){return ERRNO_NOTSUP}fd_filestat_get(){return{ret:ERRNO_NOTSUP,filestat:null}}fd_filestat_set_size(e){return ERRNO_NOTSUP}fd_filestat_set_times(e,t,n){return ERRNO_NOTSUP}fd_pread(e,t){return{ret:ERRNO_NOTSUP,data:new Uint8Array}}fd_prestat_get(){return{ret:ERRNO_NOTSUP,prestat:null}}fd_pwrite(e,t){return{ret:ERRNO_NOTSUP,nwritten:0}}fd_read(e){return{ret:ERRNO_NOTSUP,data:new Uint8Array}}fd_readdir_single(e){return{ret:ERRNO_NOTSUP,dirent:null}}fd_seek(e,t){return{ret:ERRNO_NOTSUP,offset:0n}}fd_sync(){return 0}fd_tell(){return{ret:ERRNO_NOTSUP,offset:0n}}fd_write(e){return{ret:ERRNO_NOTSUP,nwritten:0}}path_create_directory(e){return ERRNO_NOTSUP}path_filestat_get(e,t){return{ret:ERRNO_NOTSUP,filestat:null}}path_filestat_set_times(e,t,n,r,s){return ERRNO_NOTSUP}path_link(e,t,n){return ERRNO_NOTSUP}path_unlink(e){return{ret:ERRNO_NOTSUP,inode_obj:null}}path_lookup(e,t){return{ret:ERRNO_NOTSUP,inode_obj:null}}path_open(e,t,n,r,s,i){return{ret:ERRNO_NOTDIR,fd_obj:null}}path_readlink(e){return{ret:ERRNO_NOTSUP,data:null}}path_remove_directory(e){return ERRNO_NOTSUP}path_rename(e,t,n){return ERRNO_NOTSUP}path_unlink_file(e){return ERRNO_NOTSUP}}class Inode{}class OpenFile extends Fd{fd_allocate(e,t){if(this.file.size>e+t);else{const n=new Uint8Array(Number(e+t));n.set(this.file.data,0),this.file.data=n}return ERRNO_SUCCESS}fd_fdstat_get(){return{ret:0,fdstat:new Fdstat(FILETYPE_REGULAR_FILE,0)}}fd_filestat_set_size(e){if(this.file.size>e)this.file.data=new Uint8Array(this.file.data.buffer.slice(0,Number(e)));else{const t=new Uint8Array(Number(e));t.set(this.file.data,0),this.file.data=t}return ERRNO_SUCCESS}fd_read(e){const t=this.file.data.slice(Number(this.file_pos),Number(this.file_pos+BigInt(e)));return this.file_pos+=BigInt(t.length),{ret:0,data:t}}fd_pread(e,t){return{ret:0,data:this.file.data.slice(Number(t),Number(t+BigInt(e)))}}fd_seek(e,t){let n;switch(t){case WHENCE_SET:n=e;break;case WHENCE_CUR:n=this.file_pos+e;break;case WHENCE_END:n=BigInt(this.file.data.byteLength)+e;break;default:return{ret:ERRNO_INVAL,offset:0n}}return n<0?{ret:ERRNO_INVAL,offset:0n}:(this.file_pos=n,{ret:0,offset:this.file_pos})}fd_tell(){return{ret:0,offset:this.file_pos}}fd_write(e){if(this.file.readonly)return{ret:ERRNO_BADF,nwritten:0};if(this.file_pos+BigInt(e.byteLength)>this.file.size){const t=this.file.data;this.file.data=new Uint8Array(Number(this.file_pos+BigInt(e.byteLength))),this.file.data.set(t)}return this.file.data.set(e,Number(this.file_pos)),this.file_pos+=BigInt(e.byteLength),{ret:0,nwritten:e.byteLength}}fd_pwrite(e,t){if(this.file.readonly)return{ret:ERRNO_BADF,nwritten:0};if(t+BigInt(e.byteLength)>this.file.size){const n=this.file.data;this.file.data=new Uint8Array(Number(t+BigInt(e.byteLength))),this.file.data.set(n)}return this.file.data.set(e,Number(t)),{ret:0,nwritten:e.byteLength}}fd_filestat_get(){return{ret:0,filestat:this.file.stat()}}constructor(e){super(),this.file_pos=0n,this.file=e}}class OpenDirectory extends Fd{fd_seek(e,t){return{ret:ERRNO_BADF,offset:0n}}fd_tell(){return{ret:ERRNO_BADF,offset:0n}}fd_allocate(e,t){return ERRNO_BADF}fd_fdstat_get(){return{ret:0,fdstat:new Fdstat(FILETYPE_DIRECTORY,0)}}fd_readdir_single(e){if(debug.enabled&&(debug.log(\"readdir_single\",e),debug.log(e,this.dir.contents.keys())),0n==e)return{ret:ERRNO_SUCCESS,dirent:new Dirent(1n,\".\",FILETYPE_DIRECTORY)};if(1n==e)return{ret:ERRNO_SUCCESS,dirent:new Dirent(2n,\"..\",FILETYPE_DIRECTORY)};if(e>=BigInt(this.dir.contents.size)+2n)return{ret:0,dirent:null};const[t,n]=Array.from(this.dir.contents.entries())[Number(e-2n)];return{ret:0,dirent:new Dirent(e+1n,t,n.stat().filetype)}}path_filestat_get(e,t){const{ret:n,path:r}=Path.from(t);if(null==r)return{ret:n,filestat:null};const{ret:s,entry:i}=this.dir.get_entry_for_path(r);return null==i?{ret:s,filestat:null}:{ret:0,filestat:i.stat()}}path_lookup(e,t){const{ret:n,path:r}=Path.from(e);if(null==r)return{ret:n,inode_obj:null};const{ret:s,entry:i}=this.dir.get_entry_for_path(r);return null==i?{ret:s,inode_obj:null}:{ret:ERRNO_SUCCESS,inode_obj:i}}path_open(e,t,n,r,s,i){const{ret:l,path:a}=Path.from(t);if(null==a)return{ret:l,fd_obj:null};let{ret:_,entry:o}=this.dir.get_entry_for_path(a);if(null==o){if(_!=ERRNO_NOENT)return{ret:_,fd_obj:null};if((n&OFLAGS_CREAT)!=OFLAGS_CREAT)return{ret:ERRNO_NOENT,fd_obj:null};{const{ret:e,entry:r}=this.dir.create_entry_for_path(t,(n&OFLAGS_DIRECTORY)==OFLAGS_DIRECTORY);if(null==r)return{ret:e,fd_obj:null};o=r}}else if((n&OFLAGS_EXCL)==OFLAGS_EXCL)return{ret:ERRNO_EXIST,fd_obj:null};return(n&OFLAGS_DIRECTORY)==OFLAGS_DIRECTORY&&o.stat().filetype!==FILETYPE_DIRECTORY?{ret:ERRNO_NOTDIR,fd_obj:null}:o.path_open(n,r,i)}path_create_directory(e){return this.path_open(0,e,OFLAGS_CREAT|OFLAGS_DIRECTORY,0n,0n,0).ret}path_link(e,t,n){const{ret:r,path:s}=Path.from(e);if(null==s)return r;if(s.is_dir)return ERRNO_NOENT;const{ret:i,parent_entry:l,filename:a,entry:_}=this.dir.get_parent_dir_and_entry_for_path(s,!0);if(null==l||null==a)return i;if(null!=_){const e=t.stat().filetype==FILETYPE_DIRECTORY,r=_.stat().filetype==FILETYPE_DIRECTORY;if(e&&r){if(!(n&&_ instanceof Directory))return ERRNO_EXIST;if(0!=_.contents.size)return ERRNO_NOTEMPTY}else{if(e&&!r)return ERRNO_NOTDIR;if(!e&&r)return ERRNO_ISDIR;if(t.stat().filetype!=FILETYPE_REGULAR_FILE||_.stat().filetype!=FILETYPE_REGULAR_FILE)return ERRNO_EXIST}}return n||t.stat().filetype!=FILETYPE_DIRECTORY?(l.contents.set(a,t),ERRNO_SUCCESS):ERRNO_PERM}path_unlink(e){const{ret:t,path:n}=Path.from(e);if(null==n)return{ret:t,inode_obj:null};const{ret:r,parent_entry:s,filename:i,entry:l}=this.dir.get_parent_dir_and_entry_for_path(n,!0);return null==s||null==i?{ret:r,inode_obj:null}:null==l?{ret:ERRNO_NOENT,inode_obj:null}:(s.contents.delete(i),{ret:ERRNO_SUCCESS,inode_obj:l})}path_unlink_file(e){const{ret:t,path:n}=Path.from(e);if(null==n)return t;const{ret:r,parent_entry:s,filename:i,entry:l}=this.dir.get_parent_dir_and_entry_for_path(n,!1);return null==s||null==i||null==l?r:l.stat().filetype===FILETYPE_DIRECTORY?ERRNO_ISDIR:(s.contents.delete(i),ERRNO_SUCCESS)}path_remove_directory(e){const{ret:t,path:n}=Path.from(e);if(null==n)return t;const{ret:r,parent_entry:s,filename:i,entry:l}=this.dir.get_parent_dir_and_entry_for_path(n,!1);return null==s||null==i||null==l?r:l instanceof Directory&&l.stat().filetype===FILETYPE_DIRECTORY?0!==l.contents.size?ERRNO_NOTEMPTY:s.contents.delete(i)?ERRNO_SUCCESS:ERRNO_NOENT:ERRNO_NOTDIR}fd_filestat_get(){return{ret:0,filestat:this.dir.stat()}}fd_filestat_set_size(e){return ERRNO_BADF}fd_read(e){return{ret:ERRNO_BADF,data:new Uint8Array}}fd_pread(e,t){return{ret:ERRNO_BADF,data:new Uint8Array}}fd_write(e){return{ret:ERRNO_BADF,nwritten:0}}fd_pwrite(e,t){return{ret:ERRNO_BADF,nwritten:0}}constructor(e){super(),this.dir=e}}class PreopenDirectory extends OpenDirectory{fd_prestat_get(){return{ret:0,prestat:Prestat.dir(this.prestat_name)}}constructor(e,t){super(new Directory(t)),this.prestat_name=e}}class File extends Inode{path_open(e,t,n){if(this.readonly&&(t&BigInt(RIGHTS_FD_WRITE))==BigInt(RIGHTS_FD_WRITE))return{ret:ERRNO_PERM,fd_obj:null};if((e&OFLAGS_TRUNC)==OFLAGS_TRUNC){if(this.readonly)return{ret:ERRNO_PERM,fd_obj:null};this.data=new Uint8Array([])}const r=new OpenFile(this);return n&FDFLAGS_APPEND&&r.fd_seek(0n,WHENCE_END),{ret:ERRNO_SUCCESS,fd_obj:r}}get size(){return BigInt(this.data.byteLength)}stat(){return new Filestat(FILETYPE_REGULAR_FILE,this.size)}constructor(e,t){super(),this.data=new Uint8Array(e),this.readonly=!!t?.readonly}}let Path=class e{static from(t){const n=new e;if(n.is_dir=t.endsWith(\"/\"),t.startsWith(\"/\"))return{ret:ERRNO_NOTCAPABLE,path:null};if(t.includes(\"\\0\"))return{ret:ERRNO_INVAL,path:null};for(const e of t.split(\"/\"))if(\"\"!==e&&\".\"!==e)if(\"..\"!==e)n.parts.push(e);else if(null==n.parts.pop())return{ret:ERRNO_NOTCAPABLE,path:null};return{ret:ERRNO_SUCCESS,path:n}}to_path_string(){let e=this.parts.join(\"/\");return this.is_dir&&(e+=\"/\"),e}constructor(){this.parts=[],this.is_dir=!1}},inst;class Directory extends Inode{path_open(e,t,n){return{ret:ERRNO_SUCCESS,fd_obj:new OpenDirectory(this)}}stat(){return new Filestat(FILETYPE_DIRECTORY,0n)}get_entry_for_path(e){let t=this;for(const n of e.parts){if(!(t instanceof Directory))return{ret:ERRNO_NOTDIR,entry:null};const e=t.contents.get(n);if(void 0===e)return debug.log(n),{ret:ERRNO_NOENT,entry:null};t=e}return e.is_dir&&t.stat().filetype!=FILETYPE_DIRECTORY?{ret:ERRNO_NOTDIR,entry:null}:{ret:ERRNO_SUCCESS,entry:t}}get_parent_dir_and_entry_for_path(e,t){const n=e.parts.pop();if(void 0===n)return{ret:ERRNO_INVAL,parent_entry:null,filename:null,entry:null};const{ret:r,entry:s}=this.get_entry_for_path(e);if(null==s)return{ret:r,parent_entry:null,filename:null,entry:null};if(!(s instanceof Directory))return{ret:ERRNO_NOTDIR,parent_entry:null,filename:null,entry:null};const i=s.contents.get(n);return void 0===i?t?{ret:ERRNO_SUCCESS,parent_entry:s,filename:n,entry:null}:{ret:ERRNO_NOENT,parent_entry:null,filename:null,entry:null}:e.is_dir&&i.stat().filetype!=FILETYPE_DIRECTORY?{ret:ERRNO_NOTDIR,parent_entry:null,filename:null,entry:null}:{ret:ERRNO_SUCCESS,parent_entry:s,filename:n,entry:i}}create_entry_for_path(e,t){const{ret:n,path:r}=Path.from(e);if(null==r)return{ret:n,entry:null};let s,{ret:i,parent_entry:l,filename:a,entry:_}=this.get_parent_dir_and_entry_for_path(r,!0);return null==l||null==a?{ret:i,entry:null}:null!=_?{ret:ERRNO_EXIST,entry:null}:(debug.log(\"create\",r),s=t?new Directory(new Map):new File(new ArrayBuffer(0)),l.contents.set(a,s),_=s,{ret:ERRNO_SUCCESS,entry:_})}constructor(e){super(),this.contents=e instanceof Array?new Map(e):e}}class ConsoleStdout extends Fd{fd_filestat_get(){return{ret:0,filestat:new Filestat(FILETYPE_CHARACTER_DEVICE,BigInt(0))}}fd_fdstat_get(){const e=new Fdstat(FILETYPE_CHARACTER_DEVICE,0);return e.fs_rights_base=BigInt(RIGHTS_FD_WRITE),{ret:0,fdstat:e}}fd_write(e){return this.write(e),{ret:0,nwritten:e.byteLength}}static lineBuffered(e){const t=new TextDecoder(\"utf-8\",{fatal:!1});let n=\"\";return new ConsoleStdout((r=>{n+=t.decode(r,{stream:!0});const s=n.split(\"\\n\");for(const[t,r]of s.entries())t<s.length-1?e(r):n=r}))}constructor(e){super(),this.write=e}}class SyncOPFSFile extends Inode{path_open(e,t,n){if(this.readonly&&(t&BigInt(RIGHTS_FD_WRITE))==BigInt(RIGHTS_FD_WRITE))return{ret:ERRNO_PERM,fd_obj:null};if((e&OFLAGS_TRUNC)==OFLAGS_TRUNC){if(this.readonly)return{ret:ERRNO_PERM,fd_obj:null};this.handle.truncate(0)}const r=new OpenSyncOPFSFile(this);return n&FDFLAGS_APPEND&&r.fd_seek(0n,WHENCE_END),{ret:ERRNO_SUCCESS,fd_obj:r}}get size(){return BigInt(this.handle.getSize())}stat(){return new Filestat(FILETYPE_REGULAR_FILE,this.size)}constructor(e,t){super(),this.handle=e,this.readonly=!!t?.readonly}}class OpenSyncOPFSFile extends Fd{fd_allocate(e,t){return BigInt(this.file.handle.getSize())>e+t||this.file.handle.truncate(Number(e+t)),ERRNO_SUCCESS}fd_fdstat_get(){return{ret:0,fdstat:new Fdstat(FILETYPE_REGULAR_FILE,0)}}fd_filestat_get(){return{ret:0,filestat:new Filestat(FILETYPE_REGULAR_FILE,BigInt(this.file.handle.getSize()))}}fd_filestat_set_size(e){return this.file.handle.truncate(Number(e)),ERRNO_SUCCESS}fd_read(e){const t=new Uint8Array(e),n=this.file.handle.read(t,{at:Number(this.position)});return this.position+=BigInt(n),{ret:0,data:t.slice(0,n)}}fd_seek(e,t){let n;switch(t){case WHENCE_SET:n=BigInt(e);break;case WHENCE_CUR:n=this.position+BigInt(e);break;case WHENCE_END:n=BigInt(this.file.handle.getSize())+BigInt(e);break;default:return{ret:ERRNO_INVAL,offset:0n}}return n<0?{ret:ERRNO_INVAL,offset:0n}:(this.position=n,{ret:ERRNO_SUCCESS,offset:this.position})}fd_write(e){if(this.file.readonly)return{ret:ERRNO_BADF,nwritten:0};const t=this.file.handle.write(e,{at:Number(this.position)});return this.position+=BigInt(t),{ret:ERRNO_SUCCESS,nwritten:t}}fd_sync(){return this.file.handle.flush(),ERRNO_SUCCESS}constructor(e){super(),this.position=0n,this.file=e}}function runWasm(e,t=null){const n=new WASI([],[],[new OpenFile(new File([])),new OpenFile(new File([])),new OpenFile(new File([]))]),r={refs:new Map,stack:null};function s(e,t){const n=new DataView(inst.exports.memory.buffer),s={triggerEvent:function(r,s){const i={mem:n,begin:e,end:e+t};proto.ni(i,[proto.JC.EventMsg,r,s]),inst.exports.wasm_app(e)},resumeCont:function(r,s){const i={mem:n,begin:e,end:e+t};proto.ni(i,[proto.JC.ResumeMsg,r,s]),inst.exports.wasm_app(e)},persistent:r,mem:n,isMutableMem:!0,begin:e,end:e+t};proto.AZ(s)}WebAssembly.compileStreaming(fetch(e)).then((e=>WebAssembly.instantiate(e,{wasi_snapshot_preview1:n.wasiImport,env:{clickable_eval_buffer:s}}))).then((e=>{inst=e,n.initialize(e),e.exports.hs_init(),e.exports.wasm_app(0)}))}window.clickable={runWebsocket,runWasm}})();"

runApp :: ClickM () -> Application
runApp app req respond = do
  let path = pathInfo req
      html200 = respond . responseBuilder status200 [("Content-Type", "text/html")]
      text200 = respond . responseBuilder status200 [("Content-Type", "text/plain")]
  wsi <- newWebSocketInstance () (const app) fallbackApp
  case path of
    [] ->
      html200 $ index mempty
    ["about"] -> text200 ("About Page")
    ["dev.sock"] -> websocketsOr defaultConnectionOptions (websocketApp wsi)
      fallbackApp req respond
    _         -> text200 ("404 Not Found")

fallbackApp :: Application
fallbackApp _ respond = respond $ responseLBS status404
  [(hContentType, "text/html; charset=utf-8")]
  "<!document html><html><body><p>Not found</p></body></html>\n"

data WebSocketInstance = forall a. Typeable a => WebSocketInstance
  { conn_state_ref :: IORef (Map ConnectionId WebSocketConn)
  , resource :: a
  , client_app :: WebSocketConn -> StartFlags -> ClickM ()
  , server_app :: Application
  , connection_lost :: WebSocketConn -> IO ()
  }

newWebSocketInstance :: Typeable a =>
  a -> (StartFlags -> ClickM ()) -> Application -> IO WebSocketInstance
newWebSocketInstance resource clientApp serverApp = do
  conn_state_ref <- newIORef Map.empty
  return WebSocketInstance
    { conn_state_ref
    , resource
    , client_app = const clientApp
    , server_app = serverApp
    , connection_lost = \_ -> pure ()
    }

data WebSocketConn = WebSocketConn
  { connection :: Connection
  , continuations :: IORef (Map Word32 (IO ValueExpr -> IO ()))
  , internal_env :: InternalEnv
  , command_chan :: Chan (ClickM ())
  -- ^ Writing to the Chan sends a command to the browser to execute
  , connection_id :: ConnectionId
  } deriving Generic

newtype ConnectionId = ConnectionId {unConnectionId :: Int}
  deriving newtype (Ord, Show, Eq, Num, Enum)

websocketApp :: WebSocketInstance -> ServerApp
websocketApp self p =
  bracket acceptConn dropConn \connInfo ->
    withPingThread connInfo.connection 30 (pure ()) $ loop connInfo
  where
    acceptConn = mdo
      conn <- acceptRequest p
      newConn conn
    dropConn (conn::WebSocketConn) = do
      modifyIORef' (conn_state_ref self) $ Map.delete conn.connection_id
      self.connection_lost conn
    loop (conn::WebSocketConn) = do
      raceResult <- race
        (try @ConnectionException (receiveData conn.connection))
        (readChan conn.command_chan)
      case raceResult of
        Left (Right (incomingBytes::ByteString)) -> do
          let jsMessage = Binary.decode . BSL.fromStrict $ incomingBytes
          reader conn $ Right jsMessage
          loop conn
        Left (Left (_::ConnectionException)) ->
          return ()
        Right jsAction -> do
          reader conn $ Left jsAction
          loop conn

    reader :: WebSocketConn -> Either (ClickM ()) ClientMsg -> IO ()
    reader conn (Right (StartMsg flags)) =
      void $ runTransition conn.internal_env
        $ self.client_app conn flags
    reader conn (Right (ResumeMsg contId pload)) =
      prompt conn.internal_env.hte_prompt_tag do
        awatingThread <- atomicModifyIORef' conn.continuations $
          swap . Map.alterF (,Nothing) contId
        forM_ awatingThread \cont -> cont $ pure pload
    reader conn (Right (EventMsg eid arg)) =
      void $ runTransition conn.internal_env
        $ modify (triggerEventOp (unsafeFromEventId eid) arg)
      -- BrowserMessage BeforeUnload ->
      --   return ()
    reader conn (Left a) =
      void $ runTransition conn.internal_env a

    newConn connection = mdo
      command_chan <- newChan
      (internal_env, continuations, _) <- newInternalEnv (100 * 1024) \(ptr, len) -> do
        bs <- unsafePackCStringLen (castPtr ptr, len)
        sendDataMessage connection $ Network.WebSockets.Binary $ BSL.fromStrict bs
      atomicModifyIORef' self.conn_state_ref \m ->
        let conn = WebSocketConn
              { internal_env
              , connection
              , command_chan
              , connection_id = maybe 0 (succ . fst) $ Map.lookupMax m
              , continuations
              }
         in (Map.insert conn.connection_id conn m, conn)
